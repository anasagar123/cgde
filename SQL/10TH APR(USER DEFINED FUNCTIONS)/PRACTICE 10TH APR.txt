						######  SQL FUNCTIONS  ######
					-------------------------------------------------
(i) COUNT Function - THE SQL SERVER COUNT AGGREGATE FUNCTIONS IS USED TO COUNT THE NUMBER OF ROWS IN A DATABASE TABLE.
(ii) MAX FUNCTION - THE SQL SERVER MAX AGGREGATE FUNCTION ALLOWS TO SELECT THE HIGHEST(MAXIMUM) VALUE FOR A CERTAIN COLUMN.
(iii) MIN FUNCTION - THE SQL SERVER MIN AGGREGATE FUNCTION ALLOWS TO SELECT THE LOWEST(MINIMUM) VALUE FOR A CERTAIN COLUMN.
(iv) AVG FUNCTION - The SQL Server AVG aggregate function selects the average value for certain table column.
(v) SUM FUNCTION  - The SQL Server SUM aggregate function allows selecting the total for a numeric column.
(vi) SQRT FUNCTION - This is used to generate a square root of a given number.
(vii) RAND FUNCTION - This is used to generate a random number using SQL command.
(Viii) CONCAT FUNCTION - This is used to concatenate multiple parameters to a single parameter.
(ix) RANK FUNCTION - This is used to assign the rank to each row.

		•select RANK() over (ORDER BY MARKS DESC) 'POSITION', * from STU_MARKS;

	EXAMPLE :-

	SELECT MARKS,RANK() OVER (ORDER BY MARKS DESC) AS POSITION FROM STUDENT;
	
(x) •DENSE_RANK FUNCTION - This is used to assign the rank to each row without skipping the rank.

		•select DENSE_RANK() over (ORDER BY MARKS DESC) 'POSITION', * from STU_MARKS;

	EXAMPLE :-

	SELECT MARKS,DENSE_RANK() OVER (ORDER BY MARKS DESC) AS POSITION1 FROM STUDENT;

(xi) •ROW_NUMBER FUNCTION - This is used to add the row no to each row.

		•select row_number() over (ORDER BY MARKS DESC) 'ROWNO', * from STU_MARKS;
	
	EXAMPLE :-

	SELECT MARKS,ROW_NUMBER() OVER (ORDER BY MARKS DESC) AS POSITION2 FROM STUDENT;




					#### SQL STRING FUNCTIONS ####
				  -----------------------------------------------

(i) ASCII() - Ascii code value will come as output for a character expression.

		SELECT ASCII ('A');

(ii) CHAR() - Character will come as output for given Ascii code or integer.

		SELECT CHAR(65);

(iii) CHARINDEX() - Starting position for given search expression will come as output in a given string expression. EX: Select CHARINDEX('G', 'KING').


		SELECT CHARINDEX('L','WELCOME');

		
(iv) LEFT() - Left part of the given string till the specified number of characters.

		SELECT LEFT ('WELCOME',3);

(v) RIGHT() - Right part of the given string till the specified number of characters.

		SELECT RIGHT ('WELCOME',4);

(vi) LEN() - Number of characters will come as output for a given string expression.

		SELECT LEN('WELCOME');

(vii) LOWER() - Lowercase string will come as output for a given string data.

		SELECT LOWER('WELCOME')

(viii) UPPER() - Uppercase string will come as output for a given string data.

		SELECT UPPER('welcome')

(ix) SUBSTRING() - Part of a string based on the start position value and length value.

		Ex: Select SUBSTRING ('WORLD', 1,3)

(x) REPLACE() - String expression will come as output for a given string data after
replacing all occurrences of specified character with specified character.

		Ex: Select REPLACE('INDIA', 'I', 'K')

(xi) REVERSE() - Reverse string expression will come as output for a given string data.

		SELECT REVERSE('WELCOME');

(xii) STUFF() String expression will come as output for a given string data after
replacing from starting character till the specified length with specified character.

		Ex Select STUFF('ABCDEFGH', 2,4,'IJK')



SELECT EID,NAME,UPPER(CONCAT(ADDRESS1,' ',ADDRESS2,' ',CITY) AS 'ADDRESS',
LEFT (NAME,1) AS 'INITIAL',CHARINDEX(' ',NAME) AS 'S',LEN(NAME) AS 'L',
LEFT (NAME,CHARINDEX(' ',NAME)) AS 'FNAME',
RIGHT (NAME,LEN(NAME) - CHARINDEX(' '.NAME)) AS 'LNAME',
UPPER(CONCAT(LEFT(NAME,1),RIGHT(NAME,LEN(NAME) - CHARINDEX(' ',NAME)),RIGHT(EID,3),'@OUTLOOK.COM')) AS 'CORPORATE EMAIL'
FROM EMP;



						##### SQL DATE FUNCTIONS ####
					  -------------------------------------------

	BELOW ARE THE COMMONLY USED DATE FUNCTIONS:


FUNCTION 			SYNTAX
-----------		      -------------
GETDATE 			GETDATE()
DATEADD 			DATEADD (datepart , number , date )
DATEDIFF 			DATEDIFF ( datepart , startdate , enddate )
DAY 				DAY(DATE)
MONTH 				MONTH(DATE)
YEAR 				YEAR(DATE)
DATEPART 			DATEPART(datepart, datecolumnEID)
CONVERT 			CONVERT(datatype, expression, style)
FORMAT 				FORMAT ( getdate(), 'D') -> Wednesday, September 6, 2017


		EXAMPLE :-


SELECT GETDATE();

SELECT	GETDATE(), DATEADD(D,20, GETDATE()), DATEADD(M,9,GETDATE()), DATEADD(YY, 2, GETDATE());

SELECT EID, NAME, DOJ, DATEDIFF(YY, DOJ, GETDATE())
FROM EMP;

SELECT GETDATE(), DAY(GETDATE()) AS 'DAY', MONTH(GETDATE()) AS'MTH', YEAR(GETDATE()) AS 'YER';

SELECT GETDATE(), DATEPART(D,GETDATE()) AS 'DAY', DATEPART(M,GETDATE()) AS 'MTH', DATEPART(YY,GETDATE()) AS'YER';

SELECT GETDATE(), CONVERT(VARCHAR(20), GETDATE()) , CONVERT(VARCHAR(20), GETDATE(), 101);

SELECT GETDATE(), FORMAT(GETDATE(),'D'), FORMAT(GETDATE(), 'M'), FORMAT(GETDATE(),'Y');

SELECT EID, NAME, DOJ , DATEADD(D,90,DOJ) AS 'CONFIRMATION DATE'
FROM EMP;

SELECT EID, NAME, DOJ
FROM EMP
WHERE YEAR(DOJ)= 2021;

SELECT EID, NAME, DOB
FROM EMP
WHERE MONTH(DOB)=4;

SELECT YEAR (DOJ) AS 'JOINING YEAR', COUNT(EID) AS 'NO OF JOININGS'
FROM EMP
GROUP BY YEAR(DOJ)
ORDER BY COUNT(EID) DESC;




							#### USER DEFINED FUNCTIONS  ####
						-------------------------------------------------

-> USER DEFINED FUNCTIONS CAN BE USED TO PERFORM A COMPLEX LOGIC,CAN ACCEPT PARAMETERS AND RETURN DATA.

-> SQL SERVER SUPPORTS TWO TYPES OF USER DEFINED FUNCTIONS AS MENTIONED BELOW.

		  ----> SCALAR FUNCTIONS - THE FUNCTION WHICH RETURNS A SCALAR/SINGLE VALUE.

CREATE FUNCTION MYSUM (@A INT,@B INT)
RETURNS INT
AS
BEGIN
DECLARE @C AS INT;
SET @C=@A+@B;
RETURN @C;
END;

SELECT DBO.MYSUM(10,20);


CREATE FUNCTION CAL (@X AS INT, @Y AS INT, @O AS CHAR(1))
RETURNS INT
AS
BEGIN
	DECLARE @Z AS INT;

	IF @O = '+'
		SET @Z = @X + @Y;
	ELSE IF @O = '-'
		SET @Z = @X - @Y;
	ELSE IF @O = '*'
		SET @Z = @X * @Y;
	ELSE IF @O = '/'
		SET @Z = @X / @Y;
	ELSE IF @O = '%'
		SET @Z = @X % @Y;
	ELSE
		SET @Z = 0;
	
	RETURN @Z;
END;


SELECT DBO.CAL(25,4, '*');



-> TABLE VALUED FUNCTIONS - THE FUNCTION WHICH RETURNS  A ROW SET OF SQL SERVER TABLE.


CREATE FUNCTION GETEMP (
@DEP VARCHAR(50)
) RETURNS TABLE
AS

RETURN ( SELECT * FROM EMP WHERE DEPT = @DEP)
;
SELECT * FROM DBO.GETEMP('ADMIN')







		

		
