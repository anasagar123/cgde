						##### SQL SUB QUERIES  ####
					  ------------------------------------------

-> A Subquery or Inner query or Nested query is a query within another SQL
    query, and embedded within the WHERE clause.

-> A subquery is used to return data that will be used in the main query as a
    condition to further restrict the data to be retrieved.

		There are a few rules that subqueries must follow:

• Subqueries must be enclosed within parentheses.
• A subquery can have only one column in the SELECT clause.
• An ORDER BY cannot be used in a subquery, although the main query can use
   an ORDER BY.

• Subqueries that return more than one row can only be used with multiple
   value operators, such as the IN operator.
• The BETWEEN operator cannot be used with a subquery; however, the
   BETWEEN can be used within the subquery.



		## Simple Sub Queries ##
           ---------------------------------


Subqueries are most frequently used with the SELECT statement. The basic
syntax is as follows:
SELECT column_EID [, column_EID ]
FROM table1 [, table2 ]
WHERE column_EID OPERATOR
(SELECT column_EID [, column_EID ]
FROM table1 [, table2 ]
[WHERE])


		EXAMPLE :-
	   ------------------

SELECT Name
FROM Employees
WHERE DepartmentID = (
    SELECT DepartmentID
    FROM Departments
    WHERE DepartmentName = 'Sales'
);



			## Correlated Sub Queries  ##
		   ---------------------------------------

There are ways to incorporate the outer query’s values into the subquery’s
clauses. These types of queries are called correlated subqueries, since the
results from the subquery are connected, in some form, to values in the outer
query. Correlated queries are sometimes called synchronized queries.


		EXAMPLE :-
            ------------------

Corelatted sub query for average salary of those delhi employees whose
salary is >100000

select avg(salary) from emp_sal
where eid in (select eid from emp where city='Delhi') and
eid in (select eid from emp_sal where salary > 100000);



SELECT EID,NAME,CITY FROM EMP  --MAIN/OUTER
WHERE EID IN (SELECT EID FROM EMP_SAL WHERE DESI = 'MANAGER'); --SUB INNER


SELECT EID,DEPT,DESI,SALARY FROM EMP_SAL
WHERE EID IN (SELECT EID FROM EMP WHERE CITY ='DELHI');


SELECT EMP.EID,NAME,DEPT,DESI
FROM EMP
INNER JOIN EMP_SAL
ON EMP.EID = EMP_SAL.EID
WHERE DEPT = 'MIS';      -- THROUGH JOIN


INSERT INTO TRAINING (EID,NAME,DEPT)
SELECT EMP.EID,NAME,DEPT
FROM EMP
INNER JOIN EMP_SAL
ON EMP.EID = EMP_SAL.EID
WHERE DEPT = 'MIS';      -- IN ONE I AM ABLE TO INSERT  RECORDS IN TABLE.

UPDATE TRAINING SET MODULE = 'SQL'


DELETE FROM TRAINING 
WHERE EID IN (SELECT EID FROM EMP_SAL WHERE DESI LIKE 'MANAGER%');

SELECT * from training;


SELECT * FROM EMP_SAL
WHERE EID IN (SELECT EID FROM EMP  WHERE CITY = 'DEHRADUN');

-- UPDATE SUB QUERY
UPDATE EMP_SAL SET SALARY = SALARY + 5000
WHERE EID IN (SELECT EID FROM EMP  WHERE CITY = 'DEHRADUN');

sELECT EID, NAME, CITY FROM EMP 
WHERE EID IN(SELECT EID FROM EMP_SAL WHERE DESI = 'MANAGER');

SELECT EID, NAME, CITY FROM EMP
WHERE EID IN (SELECT EID FROM EMP_SAL WHERE SALARY > 300000 )
ORDER BY EID DESC;

SELECT EID, NAME, CITY FROM EMP
WHERE EID IN (SELECT EID FROM EMP_SAL WHERE SALARY > 500000 );

SELECT EID, NAME, CITY FROM EMP
WHERE EID IN (SELECT EID FROM EMP_SAL WHERE SALARY BETWEEN 200000 AND 300000 );

SELECT COUNT(EID) AS 'NO OF EMP', AVG(SALARY) AS 'AVGSAL' 
FROM EMP_SAL;

SELECT COUNT(EID) AS 'NO OF DEL EMP', AVG(SALARY) AS 'DELAVGSAL' FROM EMP_SAL 
WHERE EID IN (SELECT EID FROM EMP WHERE CITY = 'DELHI');

SELECT COUNT(EID) AS 'NO OF DEL EMP > 300K', AVG(SALARY) AS 'DELAVGSAL>300K' FROM EMP_SAL --A
WHERE EID IN (SELECT EID FROM EMP WHERE CITY = 'DELHI' AND  --B
				EID IN (SELECT EID FROM EMP_SAL WHERE SALARY > 300000)); -- C

-- A => B => C  A=>C
(A related to B,B related to C, means A related to C)





						#######   SQL EXISTS OPERATORS  #######
					--------------------------------------------------------- 

-> The EXISTS operator is used to test for the existence of any record in a subquery.
->  The EXISTS operator returns true if the subquery returns one or more records.
-> EXIST OPERATOR CHECK FOR THE EXISTENCE OF THE DATA.


SELECT column_EID(s)
FROM table_EID
WHERE EXISTS
(SELECT column_EID FROM table_EID WHERE condition);



		EXAMPLE :-
              ----------------

REQUIREMENT :- I WANT TO SEE THE SALARY DETAIL OF ALL THE HR TEAM MEMBER IF ANY OF THE HR TEAM MEMBER  HAS THE SALARY MORE THEN 3 LAKH.

SELECT * FROM EMP_SAL WHERE DEPT = 'HR'
AND EXISTS (SELECT * FROM EMP_SAL WHERE DEPT = 'HR' AND SALARY > 300000);




	

							########   STORED PROCEDURES   ######
						 ----------------------------------------------------


->  A stored procedure is prepared SQL code that we save so we can reuse the code
      over and over again. So if we think about a query that we write over and over
      again, instead of having to write that query each time we would save it as a
      stored procedure and then just call the stored procedure to execute the SQL
      code that we saved as part of the stored procedure.
-> In addition to running the same SQL code over and over again we also have the
      ability to pass parameters to the stored procedure.


CREATE PROCEDURE <procedure_EID>
AS
BEGIN
<SQL Statement>
END

EXECUTE <procedure_EID>
EXEC <procedure_EID>
<procedure_EID>




      -> Simple Procedure to get the details of Delhi employees

CREATE PROCEDURE SHDELEMP
AS
BEGIN
SELECT * FROM EMP WHERE CITY = 'DELHI';
END;


		EXAMPLE :


CREATE PROCEDURE LB37DEMP
AS
BEGIN	
	SELECT * FROM EMP
	WHERE CITY = 'DELHI';
END;


CREATE PROCEDURE LB37DEMP @C AS VARCHAR(30)
AS
BEGIN	
	SELECT * FROM EMP
	WHERE CITY = @C;
END;

DROP PROCEDURE LB37DEMP;
EXECUTE LB37DEMP;

EXEC LB37DEMP;

LB37DEMP 'DELHI'; 



	-> Parameterized Procedure to get the details of employees of the specified city.

CREATE PROCEDURE SHOWEMP @X VARCHAR(20)
AS
BEGIN
SELECT * FROM EMP WHERE CITY = @X;
END;


		EXAMPLE :- 

CREATE PROCEDURE L37SHOW @T AS VARCHAR(30)
AS
BEGIN
	EXEC('SELECT * FROM ' + @T);
END;


L37SHOW 'EMP';



EXAMPLE 3 : Parameterized Procedure to get the contents of the specified
table

CREATE PROCEDURE SHOW @Y VARCHAR(20)
AS
BEGIN

EXEC('SELECT * FROM ' + @Y );

END;



EXAMPLE 4 : Parameterized Procedure to insert the data in the emp_sal table

CREATE PROCEDURE IN_EMP_SAL
@ID VARCHAR(5), @A VARCHAR(20), @B VARCHAR(20), @X INT
AS
BEGIN

SET NOCOUNT ON ;
INSERT INTO EMP_SAL VALUES
( @ID, @A, @B, @X );

SELECT * FROM EMP_SAL
WHERE EID=@ID;

END;



INSERT INTO EMP
VALUES (1225, 'RAMESH GROVER',  'MAHAGUN APARTMENTS','SECTOR 78', 'NOIDA', '9855556670','RGROVER@YAHOO.COM', '25-MAR-1991', '25-JAN-2021');


DELETE FROM EMP WHERE EID = 1225;
DELETE FROM EMP_SAL WHERE EID = 1225;

SELECT * FROM EMP;

drop PROCEDURE LB37INEMP ;

CREATE PROCEDURE LB37INEMP @ID AS INT, @N AS VARCHAR (30),@A1  AS VARCHAR (30),@A2  AS VARCHAR (30),@C  AS VARCHAR (30),@PH AS CHAR(15), @EM AS VARCHAR (50),@DB AS DATE, @DJ AS DATE
AS
BEGIN 
	
	INSERT INTO EMP
	VALUES(@ID, @N , @A1, @A2, @C, @PH, @EM, @DB, @DJ);

	SELECT * FROM EMP WHERE EID = @ID;
END;

LB37INEMP 1225, 'RAMESH GROVER',  'MAHAGUN APARTMENTS','SECTOR 78', 'NOIDA', '9855556670','RGROVER@YAHOO.COM', '25-MAR-1991', '25-JAN-2021';

SELECT * FROM EMP_SAL;


CREATE PROCEDURE LB37INEMP @ID AS INT, @N AS VARCHAR (30),@A1  AS VARCHAR (30),@A2  AS VARCHAR (30),@C  AS VARCHAR (30),@PH AS CHAR(15), @EM AS VARCHAR (50),@DB AS DATE, @DJ AS DATE, @DPT AS VARCHAR(20), @DSI AS VARCHAR(30) ,@S AS INT
AS
BEGIN 
	SET NOCOUNT ON;	
	INSERT INTO EMP
	VALUES(@ID, @N , @A1, @A2, @C, @PH, @EM, @DB, @DJ);

	INSERT INTO EMP_SAL
	VALUES(@ID, @DPT, @DSI, @S);

	SELECT * FROM EMP WHERE EID = @ID;

	SELECT * FROM EMP_SAL WHERE EID = @ID;

	SELECT EMP.EID , NAME, CITY , DOJ , DEPT, DESI, SALARY AS 'BASIC', SALARY *.15 AS 'HRA', SALARY *.09 AS 'PF'
	FROM EMP
	INNER JOIN EMP_SAL
	ON EMP.EID = EMP_SAL.EID
	WHERE EMP.EID = @ID;
END;

LB37INEMP 1225, 'RAMESH GROVER',  'MAHAGUN APARTMENTS','SECTOR 78', 'NOIDA', '9855556670','RGROVER@YAHOO.COM', '25-MAR-1991', '25-JAN-2021', 'TEMP','ASSOCIATE', 70000 ;


















