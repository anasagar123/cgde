USE LEARN37;

CREATE TABLE TEMP
(ID INT,
NAME VARCHAR(10)
);

INSERT INTO TEMP VALUES(1, 'A');
INSERT INTO TEMP VALUES(2, 'B');
INSERT INTO TEMP VALUES(3, 'C');
INSERT INTO TEMP VALUES(4, 'D');
INSERT INTO TEMP VALUES(5, 'E');
INSERT INTO TEMP VALUES(6, 'F');
INSERT INTO TEMP VALUES(7, 'G');
INSERT INTO TEMP VALUES(8, 'H');
INSERT INTO TEMP VALUES(9, 'I');
INSERT INTO TEMP VALUES(10, 'J');

SELECT * FROM TEMP;

DELETE FROM TEMP WHERE ID = 10;

BEGIN TRANSACTION;
DELETE FROM TEMP WHERE ID = 9;

ROLLBACK;

BEGIN TRANSACTION;
DELETE FROM TEMP WHERE ID = 9;
DELETE FROM TEMP WHERE ID = 8;
DELETE FROM TEMP WHERE ID = 7;
DELETE FROM TEMP WHERE ID = 6;

BEGIN TRANSACTION ;

DELETE FROM TEMP WHERE ID = 5;

SAVE TRANSACTION T1; -- SAVE POINTS
DELETE FROM TEMP WHERE ID = 6;
DELETE FROM TEMP WHERE ID = 7;

SAVE TRANSACTION T2;
DELETE FROM TEMP WHERE ID = 8;

SAVE TRANSACTION T3;
DELETE FROM TEMP WHERE ID = 9;

SELECT * FROM TEMP;

ROLLBACK TRANSACTION T1;

BEGIN TRANSACTION;

DELETE FROM TEMP WHERE ID = 9;
COMMIT;

ROLLBACK;


CREATE TABLE EMP2
(ID INT IDENTITY (1,1),-- START , INCREMENT
NAME VARCHAR(20),
AGE INT);

INSERT INTO EMP2 (NAME, AGE)
VALUES('AMIT', 12);

INSERT INTO EMP2
VALUES('RAJ', 13);

INSERT INTO EMP2
VALUES('AJEET', 12);

INSERT INTO EMP2
VALUES('GAURAV SHARMA', 21);

DELETE FROM EMP2 WHERE ID = 3;

SELECT * FROM EMP2;

CREATE PROCEDURE INEMP2 @N AS VARCHAR(30), @A AS INT
AS
BEGIN
	INSERT INTO EMP2
	VALUES(@N,@A);

	SELECT * FROM EMP2;
END;


INEMP2 'KULDEEP SINGH', 25;

DROP SEQUENCE MYSEQ;

CREATE SEQUENCE MYSEQ
AS INT
START WITH 1 
INCREMENT BY 1
MAXVALUE 10
MINVALUE 1
CYCLE
CACHE 5;

SELECT NEXT VALUE FOR MYSEQ;

DROP TABLE EMP3;
DROP SEQUENCE MYSEQ;
DROP PROCEDURE INEMP3;
CREATE TABLE EMP3
(EID INT,
NAME VARCHAR(20),
AGE INT);


CREATE SEQUENCE MYSEQ
AS INT
START WITH 1 
INCREMENT BY 1;

INSERT INTO EMP3
VALUES(NEXT VALUE FOR MYSEQ, 'AJAY SHARMA', 26);

INSERT INTO EMP3
VALUES(NEXT VALUE FOR MYSEQ, 'GAURAV KAPOOR', 28);

SELECT * FROM EMP3;

CREATE PROCEDURE INEMP3 @N AS VARCHAR(20), @X AS INT
AS
BEGIN

	INSERT INTO EMP3
	VALUES(NEXT VALUE FOR MYSEQ, @N , @X);

	SELECT * FROM EMP3;
END;

INEMP3 'KAPIL GUPTA', 31;
INEMP3 'ROHAN KAPOOR', 29;
INEMP3 'SUNITA SINGH', 27;
INEMP3 'ABHISHEK KUMAR', 32;
INEMP3 'RAM KAPOOR', 32;

CREATE TABLE EMP3
(EID CHAR(5),
NAME VARCHAR(20),
AGE INT);


CREATE SEQUENCE MYSEQ
AS INT
START WITH 1 
INCREMENT BY 1;


CREATE PROCEDURE INEMP3 @N AS VARCHAR(20), @X AS INT
AS
BEGIN

	DECLARE @ID AS CHAR(5);
	DECLARE @I AS INT;
	SET @I = (NEXT VALUE FOR MYSEQ);
	IF @I<10 
		SET @ID = CONCAT('E000', @I);
	ELSE IF @I<100 
		SET @ID = CONCAT('E00', @I);
	ELSE IF @I<1000 
		SET @ID = CONCAT('E0', @I);
	ELSE IF @I<10000 
		SET @ID = CONCAT('E', @I);
	ELSE
		SET @ID = 'NA'
		 
	INSERT INTO EMP3
	VALUES(@ID, @N , @X);

	SELECT * FROM EMP3;
END;

DROP PROCEDURE INEMP3;

CREATE PROCEDURE INEMP3 @N AS VARCHAR(20), @X AS INT
AS
BEGIN

	DECLARE @ID AS CHAR(5);
	DECLARE @I AS INT;
	SET @I = (NEXT VALUE FOR MYSEQ);
	SET @ID = DBO.CID('E', @I);	 
	INSERT INTO EMP3
	VALUES(@ID, @N , @X);

	SELECT * FROM EMP3;
END;

INEMP3 'RAVI GROVER', 22;
DROP FUNCTION CID ;

CREATE FUNCTION CID (@C AS CHAR(1), @I AS INT)
RETURNS CHAR(5)
AS
BEGIN
	DECLARE @ID AS CHAR(5);
	IF @I<10 
		SET @ID = CONCAT(@C,'000', @I);
	ELSE IF @I<100 
		SET @ID = CONCAT(@C,'00', @I);
	ELSE IF @I<1000 
		SET @ID = CONCAT(@C,'0', @I);
	ELSE IF @I<10000 
		SET @ID = CONCAT(@C, @I);
	ELSE
		SET @ID = 'NA'
	RETURN @ID;
END;

CREATE FUNCTION CID (@C AS CHAR(1), @I AS INT)
RETURNS CHAR(5)
AS
BEGIN
	DECLARE @ID AS CHAR(5);
	SELECT @ID = CASE
					WHEN @I < 10 THEN CONCAT(@C, '000', @I)
					WHEN @I < 100 THEN CONCAT(@C, '00', @I)
					WHEN @I < 1000 THEN CONCAT(@C, '0', @I)
					WHEN @I < 10000 THEN CONCAT(@C,  @I)
					ELSE 'NA'
	END;
	RETURN @ID;
END;

SELECT DBO.CID('S', 1123);


CREATE TABLE PRODUCTS
(PID CHAR(5),
PDESC VARCHAR(40),
PRICE INT);

CREATE TABLE STOCK 
(PID CHAR(5),
SQTY INT);

CREATE TABLE ORDERS
(OID CHAR(5),
CID CHAR(5),
PID CHAR(5),
QTY INT);

INSERT INTO PRODUCTS VALUES('P0001', 'DELL MOUSE', 250);
INSERT INTO PRODUCTS VALUES('P0002', 'DELL KEYBOARD', 750);
INSERT INTO PRODUCTS VALUES('P0003', 'APC UPS', 2250);
INSERT INTO PRODUCTS VALUES('P0004', 'SAMSUNG LED MONITOR', 9000);
INSERT INTO PRODUCTS VALUES('P0005', 'HP I5 LAPTOP', 62500);

INSERT INTO STOCK VALUES('P0001', 200);
INSERT INTO STOCK VALUES('P0002', 200);
INSERT INTO STOCK VALUES('P0003', 100);
INSERT INTO STOCK VALUES('P0004', 100);
INSERT INTO STOCK VALUES('P0005', 50);

SELECT * FROM PRODUCTS;
SELECT* FROM STOCK;

SELECT * FROM ORDERS;
SELECT* FROM STOCK;

INSERT INTO ORDERS VALUES ('O0001', 'C0001', 'P0001', 20);
INSERT INTO ORDERS VALUES ('O0002', 'C0001', 'P0002', 20);
INSERT INTO ORDERS VALUES ('O0003', 'C0001', 'P0003', 20);
INSERT INTO ORDERS VALUES ('O0004', 'C0002', 'P0004', 30);
INSERT INTO ORDERS VALUES ('O0005', 'C0003', 'P0003', 30);
INSERT INTO ORDERS VALUES ('O0006', 'C0004', 'P0003', 50);
INSERT INTO ORDERS VALUES ('O0007', 'C0005', 'P0004', 50);
INSERT INTO ORDERS VALUES ('O0008', 'C0006', 'P0004', 30);


UPDATE ORDERS SET QTY = 40 WHERE OID = 'O0005';
UPDATE ORDERS SET QTY = 40 WHERE OID = 'O0004';


DROP TRIGGER TR_IN_ORD;

CREATE TRIGGER TR_IN_ORD
ON ORDERS
FOR INSERT
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE STOCK SET SQTY = SQTY - (SELECT QTY FROM INSERTED)
	WHERE PID = (SELECT PID FROM INSERTED);

END;


CREATE TRIGGER TR_DEL_PRO
ON PRODUCTS
FOR DELETE 
AS
BEGIN
	DELETE FROM STOCK 
	WHERE PID = (SELECT PID FROM DELETED);

END;

DELETE FROM PRODUCTS WHERE PID = 'P0005';

CREATE TRIGGER TR_UP_ORD
ON ORDERS
FOR UPDATE
AS
BEGIN 
	DECLARE @OQ AS INT;
	DECLARE @NQ AS INT;

	SET @OQ = (SELECT QTY FROM DELETED);
	SET @NQ= (SELECT QTY FROM INSERTED);

	UPDATE STOCK SET SQTY = SQTY + @OQ - @NQ
	WHERE PID = (SELECT PID FROM INSERTED);

END;


CREATE TRIGGER TR_IN_ORD
ON ORDERS
FOR INSERT
AS
BEGIN
	declare @QR AS INT;
	DECLARE @QS AS INT;

	SET @QR = (SELECT QTY FROM INSERTED);
	SET @QS = (SELECT SQTY FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));

	IF @QS  >= @QR
		BEGIN
			UPDATE STOCK SET SQTY = SQTY - @QR
			WHERE PID = (SELECT PID FROM INSERTED);

			COMMIT;
		END;
	ELSE
		ROLLBACK;
END;
