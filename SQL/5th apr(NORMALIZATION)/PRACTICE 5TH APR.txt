 Type of Operators

• Arithmetic Operators (+, -, /, *, %)
• Comparison Operators (=, <>, !=, >, <, >= ,<=, !>, !<)
• Logical Operators (AND, OR, NOT)
• Other Operators (BETWEEN , IN, LIKE, IS NULL, DISTINCT, EXISTS 


 EXAMPLE :

SELECT * FROM EMP
WHERE SALARY BETWEEN 50000 AND 65000

SELECT * FROM EMP
WHERE SALARY >=50000 AND SALARY<=55000

SELECT * FROM EMP
WHERE CITY='Chicago' OR CITY='New York' OR CITY='JAPAN'

SELECT * FROM EMP
WHERE CITY IN ('Chicago','New York','JAPAN')

SELECT * FROM EMP
WHERE CITY LIKE 'J%'

SELECT * FROM EMP
WHERE SALARY IS NULL; --CHECK FOR THE NULL VALUES

SELECT DISTINCT(NAME) FROM EMP -- GIVES UNIQUE VALUES OF A FIELD



			##### NORMALIZATION ####
                  -------------------------------------
-> Database normalization is the process of efficiently organizing data in a database.
It is a set or rules/ guidelines / statements that we follow while storing the data.

	There are two reasons of the normalization process:

• Eliminating redundant data, for example, storing the same data in more than one tables.
• Ensuring data dependencies make sense. 


	First Normal Form (1NF)
        -----------------------
• Define the data items. This means looking at the data to be stored, organizing the data into columns,defining what type of data each column contains, and finally putting related columns into their own table.

• Ensure that there are no repeating groups of data
• Ensure that there is a primary key.



            Second Normal Form (2NF)  
            ------------------------
• It should meet all the rules for 1NF
• There must be no partial dependences of any of the columns on the primary key


		Third Normal Form (3NF)
                -----------------------
• It should meet all the rules for 2NF
• Tables should have relationship.



		### CONSTRAINTS  ###
          ----------------------------------------- 
-> Constraints are used to specify rules for the data in a table.

	Following are commanly used constraints available in SQL :

• PRIMARY Key: Uniquely identified each rows/records in a database table.
• UNIQUE Constraint: Ensures that all values in a column are different.
• NOT NULL Constraint: Ensures that a column cannot have NULL value.
• DEFAULT Constraint : Provides a default value for a column when none is specified. 
• CHECK Constraint: The CHECK constraint ensures that all values in a column satisfy certain conditions.
• FOREIGN Key: Uniquely identified a rows/records in any another database table


            NOT NULL CONSTRAINT
           ----------------------
-> By default, a column can hold NULL values. If we do not want a column to have a NULL value then we need
to define such constraint on this column specifying that NULL is now not allowed for that column.

CREATE TABLE SALESS(
ID INT NOT NULL,
EID VARCHAR (20) NOT NULL,
AGE INT NOT NULL,
ADDRESS CHAR (25) ,
SALARY DECIMAL (18, 2)
);


ALTER TABLE SALESS
ALTER COLUMN SALARY DECIMAL (18, 2) NOT NULL;


		DEFAULT CONSTRAINT
                -------------------
-> The DEFAULT constraint provides a default value to a column when the INSERT INTO statement does
not provide a specific value

CREATE TABLE SALESS(
ID INT NOT NULL,
EID VARCHAR (20) NOT NULL,
AGE INT NOT NULL,
ADDRESS CHAR (25) ,
SALARY DECIMAL (18, 2) DEFAULT 5000.00
)


ALTER TABLE SALESS
ADD CONSTRAINT DSAL DEFAULT 5000.00 FOR SALARY

ALTER TABLE SALESS
DROP CONSTRAINT DSAL;



			UNIQUE CONSTRAINT
                        ------------------
-> THE UNIQUE CONSTRAINT PROVIDES A UNIQUE VALUE TO A COLUMN.

CREATE TABLE SALESS(
ID INT NOT NULL,
EID VARCHAR (20) NOT NULL,
AGE INT NOT NULL UNIQUE,
ADDRESS CHAR (25) ,
PHONE VARCHAR(10) UNIQUE,
SALARY DECIMAL (18, 2) DEFAULT 5000.00
);


ALTER TABLE SALESS
ADD CONSTRAINT <CONSTRAINT EID > UNIQUE (AGE);

ALTER TABLE SALESS
ADD CONSTRAINT myUniqueConstraint UNIQUE(AGE,SALARY);

ALTER TABLE SALESS
DROP CONSTRAINT myUniqueConstraint;



			CHECK CONSTRAINT
                        ----------------
The CHECK Constraint enables a condition to check the value being entered into a
record. If the condition evaluates to false, the record violates the constraint and it's not
entered into the table.


CREATE TABLE EMP_SAL
(EID INT,
AGE INT NOT NULL CHECK (AGE>18),
DEPT VARCHAR(10),
DESI VARCHAR(15),
DOJ  VARCHAR(20),
SALARY INT)


ALTER TABLE SALESS
ADD CONSTRAINT ckAge CHECK (AGE > 18);


ALTER TABLE SALESS
DROP CONSTRAINT ckAge;



			PRIMARY KEY CONSTRAINT
                        ----------------------
-> A PRIMARY KEY IS A FIELD IN A TABLE WHICH UNIQUELY IDENTIFIES THE EACH ROWS/RECORDS IN A DATABASE TABLE.
-> PRIMARY KEYS MUST CONTAIN UNIQUE VALUES.
-> A PRIMARY KEY COLUMN CANNOT HAVE NULL VALUES.
-> A TABLE HAVE ONLY ONE PRIMARY KEY WHICH MAY CONSIST OF SINGLE OR MULTIPLE FIELDS.WHEN MULTIPLE FIELDS ARE USED AS A PRIMARY KEY,THEY ARE     CALLED A COMPOSITE KEY.


CREATE TABLE SALESS(
ID INT NOT NULL,
EID VARCHAR (20) NOT NULL,
AGE INT NOT NULL,
ADDRESS CHAR (25) ,
SALARY DECIMAL (18, 2) ,
PRIMARY KEY (ID)
);


ALTER TABLE SALESS
ADD CONSTRAINT pkID PRIMARY KEY (ID);


ALTER TABLE SALESS
DROP CONSTRAINT pkID;



			FOREIGN KEY CONSTRAINT
                        ----------------------
-> A FOREIGN KEY IS A KEY USED TO LINK TWO TABLES TOGETHER.THIS IS SOMETIMES CALLED A REFERENCING KEY.


CREATE TABLE SALESS(
ID INT NOT NULL,
EID VARCHAR (20) NOT NULL,
AGE INT NOT NULL,
ADDRESS CHAR (25) ,
PRIMARY KEY (ID)
);


CREATE TABLE ORDERS(
OID INT NOT NULL,
CUST_ID INT REFERENCES SALESS (ID),
ODATE DATE,
QTY INT,
PRICE INT
);


ALTER TABLE ORDERS
ADD CONSTRAINTS FKID FOREIGN KEY (CUST_ID) REFERENCES SALESS (ID);



			##### CLAUSES ####
                  -------------------------------------

		SQL BETWEEN Clause
              ---------------------
SELECT column1, column2....columnN FROM table_EID WHERE column_EID BETWEEN
val-1 AND val-2;

	EXAMPLE :

SELECT * FROM EMP_SAL WHERE SALARY BETWEEN 5000 AND 10000


		SQL IN Clause
                -------------
SELECT column1, column2....columnN
FROM table_EID
WHERE column_EID IN (Val1, Val2... Valn);

	EXAMPLE :

SELECT DEPT,DESI FROM EMP_SAL WHERE DEPT IN('IT','DS')


		SQL Like Clause
                ----------------
SELECT column1, column2....columnN FROM table_EID WHERE column_EID LIKE {
PATTERN}

	EXAMPLE :

SELECT * FROM EMP_SAL WHERE DESI LIKE '%ANALYST%'


		SQL COUNT Clause
                -----------------
SELECT COUNT(column_EID) FROM table_EID WHERE CONDITION;

	
	EXAMPLE :

SELECT COUNT(SALARY) FROM EMP_SAL WHERE SALARY > 9000;

SELECT COUNT(*) FROM EMP_SAL



		SQL DISTINCT Clause
                -------------------
SELECT DISTINCT (column) FROM table_EID;

	EXAMPLE :

SELECT DISTINCT DESI,EID FROM EMP_SAL





		

			ORDER BY CLAUSE
                        ----------------
-> THE ORDER BY CLAUSE KEYWORD IS USED TO SORT THE RESULT IN ASCENDING OR DESCENDING ORDER.

		EXAMPLE :

SELECT * FROM EMP_SAL WHERE DESI LIKE '%ANALYST%' ORDER BY SALARY ASC

SELECT * FROM EMP_SAL ORDER BY DESI,SALARY DESC



	
				


			GROUP BY CLAUSE
                       ------------------
-> GROUP BY is a SQL query clause used to group data rows based on one or more columns in a table.

-> The GROUP BY statement is often used with aggregate functions COUNT(), MAX(), MIN(), SUM(), AVG() to group the result-set by one or more columns.

SELECT DESI,DEPT,SUM(SALARY) AS TOTAL_SALARY FROM EMP_SAL GROUP BY DESI,DEPT ORDER BY TOTAL_SALARY DESC


		EXAMPLE :

SELECT DESI,SUM(SALARY) FROM EMP_SAL GROUP BY DESI -- DESIGNATION WISE TOTAL SALARY


SELECT DEPT,SUM(SALARY) AS TOTAL_SALARY FROM EMP_SAL GROUP BY DEPT ORDER BY TOTAL_SALARY ASC
-- DEPARTMENT WISE TOTAL SALARY IN ASCENDING ORDER

SELECT DESI,SUM(SALARY) FROM EMP_SAL GROUP BY DESI -- DESIGNATION WISE TOTAL SALARY

SELECT DEPT,SUM(SALARY) AS TOTAL_SALARY FROM EMP_SAL GROUP BY DEPT ORDER BY TOTAL_SALARY ASC -- DEPARTMENT WISE TOTAL SALARY IN ASCENDING ORDER

SELECT DESI,DEPT,SUM(SALARY) FROM EMP_SAL GROUP BY DESI  -- WILL GIVE ERROR BECAUSE WHENEVER WE ARE USING GROUP BY WE CAN ONLY DISPLAY THE FIELD WHICH EITHER WE HAVE USED IN GROUP BY OR WE HAVE USED IN AS A PART OF FUNCTION  

SELECT DESI,DEPT,SUM(SALARY) FROM EMP_SAL GROUP BY DESI,DEPT -- NOW IT WILL NOT GIVE ERROR

SELECT DESI,DEPT,SUM(SALARY) AS TOTAL_SALARY FROM EMP_SAL GROUP BY DESI,DEPT ORDER BY TOTAL_SALARY DESC




				HAVING CLAUSE
                              ----------------
-> The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.

-> WITHOUT GROUP BY WE CANT USE HAVING CLAUSE

SELECT SUM(column_EID)
FROM table_EID
WHERE CONDITION GROUP BY column_EID
HAVING (arithematic function condition);


		EXAMPLE :

SELECT DESI,DEPT,SUM(SALARY) AS TOTAL_SALARY FROM EMP_SAL GROUP BY DESI,DEPT HAVING SUM(SALARY) >= 23000 ORDER BY TOTAL_SALARY DESC










   Q. 1. HAVING
      2. WHERE
      3. ORDER BY
      4. GROUP BY
  ARRANGE IN A OREDR

ANS : -

	1.WHERE
	2.GROUP BY
	3.HAVING
	4.ORDER BY




















