         			JOINS
                          --------------------
-> JOINS ARE REQUIRED WHEN WE NEED TO RETRIEVE(DISPLAY) THE DATA FROM MORE THEN ONE TABLE.

-> IN JOINS ONLY ONE REQUIREMENT, THAT IS CPMPARABLE FIELD BASED ON THAT FIELD WE HAVE JOIN TWO TABLES.


			## INNER JOIN ##
                      ----------------------

-> INNER JOIN GIVES THE COMMON RECORD BETWEEN THE TWO TABLES.

SELECT table1.column1, table2.column2...
FROM table1
INNER JOIN table2
ON table1.common_filed = table2.common_field;

	EXAMPLE :

SELECT EMP.EMPID,EMP.NAME,EMP.CITY,EMP.DOB,EMP_SAL.DEPT,EMP_SAL.DESI,EMP_SAL.BASIC 
FROM EMP
INNER JOIN EMP_SAL
ON EMP.EMPID=EMP_SAL.EMPID 

	FOR UNDERSTANDING :-
-- EMP.NAME = PICK THE NAME FROM THE EMP TABLE
-- EMP.CITY = PICK THE CITY FROM THE EMP TABLE
-- EMP.DOB  = PICK THE DOB FROM THE EMP TABLE
-- EMP_SAL.DEPT = PICK THE DEPT FROM THE EMP_SAL
-- EMP_SAL.DESI = PICK THE DESI FROM THE EMP_SAL
-- EMP_SAL.BASIC = PICK THE BASIC FROM THE EMP_SAL
-- EMP.EMPID=EMP_SAL.EMPID = HERE EMPID IS COMPARABLE FIELD



			## LEFT JOIN ##
                     ----------------------
-> THE SQL LEFT JOIN RETURNS ALL THE VALUES FROM THE LEFT TABLE,PLUS MATCHED VALUES FROM THE RIGHT TABLE OR NULL IN CASE OF NO MATCHING.


SELECT table1.column1, table2.column2...
FROM table1
LEFT JOIN table2
ON table1.common_filed = table2.common_field;


		EXAMPLE :

SELECT EMP.EMPID,EMP.ADDR,EMP.CITY,EMP_SAL.DEPT,EMP_SAL.BASIC 
FROM EMP
LEFT JOIN EMP_SAL
ON EMP.EMPID=EMP_SAL.EMPID

	FOR UNDERSTANDING :

-> HERE EMP TABLE IS THE LEFT AND EMP_SAL IS THE RIGHT TABLE,SO IT WILL TAKE ALL THE RECORD FROM THE EMP TABLE AND MATCHING RECORD FROM THE EMP_SAL TABLE

-> ALL FROM LEFT MATCHING FROM RIGHT



			## RIGHT JOIN ##
 		   ---------------------------
-> THE SQL RIGHT JOIN RETURNS ALL THE VALUES FROM THE RIGHT TABLE,PLUS MATCHED VALUES FROM THE LEFT TABLE OR NULL IN CASE NO MATCHING.


SELECT table1.column1, table2.column2...
FROM table1
RIGHT JOIN table2
ON table1.common_filed = table2.common_field;


		EXAMPLE :

SELECT EMP.EMPID,EMP.NAME,EMP.CITY,EMP_SAL.DESI,EMP_SAL.BASIC
FROM EMP
RIGHT JOIN EMP_SAL
ON EMP.EMPID=EMP_SAL.EMPID

		FOR UNDERSTANDING :

-> HERE EMP_SAL TABLE IS THE RIGHT AND EMP IS THE LEFT TABLE,SO IT WILL TAKE ALL THE RECORD FROM THE EMP_SAL TABLE AND MATCHING RECORD FROM THE EMP TABLE

-> ALL FROM RIGHT MATCHING FROM LEFT




				## FULL JOIN ##
			     -----------------------
-> THE SQL FULL JOIN COMBINES THE RESULTS OF BOTH LEFT AND RIGHT OUTER JOIN.


SELECT table1.column1, table2.column2...
FROM table1
FULL JOIN table2
ON table1.common_filed = table2.common_field;


		EXAMPLE :

SELECT EMP1.EMPID,EMP1.NAME,EMP1.CITY,EMP1.DOB,EMP_SAL.DEPT,EMP_SAL.BASIC
FROM EMP1
FULL JOIN EMP_SAL
ON EMP1.EMPID=EMP_SAL.EMPID;



				## CARTESIAN JOIN ##
                            ------------------------------
->  THE CARTESIAN JOIN OR CROSS JOIN RETURNS THE CARTESIAN PRODUCT OF THE SETS OF RECORDS FROM THE TWO OR MORE JOINED TABLES.
 
-> IT PRODUCES A RESULT SET WHICH IS THE NUMBER OF ROWS IN THE FIRST TABLE MULTIPLIED BY THE NUMBER OF ROWS IN THE SECOND TABLE IF NO WHERE CLAUSE IS USED ALONG WITH CROSS JOIN.

-> IF WHERE CLUASE IS USED WITH CROSS JOIN,IT FUNCTION LIKE INNER JOIN.

-> CROSS JOIN + WHERE = INNER


SELECT table1.column1, table2.column2...
FROM table1
CROSS JOIN table2  



SELECT table1.column1, table2.column2...
FROM table1
CROSS JOIN table2
WHERE table1.common_filed = table2.common_field; 


		EXAMPLE :

SELECT EMP1.EMPID,EMP1.NAME,EMP1.CITY,EMP1.DOB,EMP_SAL.DEPT,EMP_SAL.BASIC
FROM EMP1
CROSS JOIN EMP_SAL


SELECT EMP1.EMPID,EMP1.NAME,EMP1.CITY,EMP1.DOB,EMP_SAL.DEPT,EMP_SAL.BASIC
FROM EMP1
CROSS JOIN EMP_SAL
WHERE EMP1.EMPID=EMP_SAL.EMPID   

-->  IT GIVES THE RESULT LIKE INNER JOIN 



				##  SELF JOIN  ##
			    ---------------------------
-> THE SQL SELF JOIN IS USED TO JOIN A TABLE TO ITSELF,AS IF THE TABLE WERE TWO TABLES,TEMPORARILY RENAMING AT LEAST ONE TABLE IN THE SQL STATEMENT.


SELECT a.column_EID, b.column_EID...
FROM table1 a, table1 b
WHERE a.common_filed = b.common_field;


------------------------------------------------------------------------------------------------------------------------------------------------------------
								  ####  CLAUSES  #####
                                                              -----------------------------




			  ## UNION CLAUSE ##
		      -----------------------------
-> THE SQL UNION CLAUSE/OPERATOR IS USED TO COMBINE THE RESULTS OF TWO OR MORE SELECT STATEMENTS WITHOUT RETURNING ANY DUPLICATE ROWS.

-> IN BOTH TABLE COLUMN NAME SHOULD BE SAME IF WE WILL USE UNION.

-> THROUGH UNION CLAUSE WE HAVE TO ADD TWO QUERY.

-> THROUGH UNION CLAUSE WE HAVE TO ADD TWO SELECT STATEMENT 

-> IN UNION COMMON RECORDS WILL DISPLAY ONLY ONCE.

-> To use UNION, each SELECT must have the same number of columns selected, the same
    number of column expressions, the same data type, and have them in the same order but
    they do not have to be the same length.


SELECT column1 [, column2 ]
FROM table1 [, table2 ]
[WHERE condition]

UNION

SELECT column1 [, column2 ]
FROM table1 [, table2 ]
[WHERE condition]



		EXAMPLE :

SELECT EMP.NAME,EMP.CITY,EMP_SAL.DEPT,EMP_SAL.BASIC
FROM EMP
LEFT JOIN EMP_SAL
ON EMP.EMPID=EMP_SAL.EMPID
UNION
SELECT EMP.NAME,EMP.CITY,EMP_SAL.DEPT,EMP_SAL.BASIC
FROM EMP
RIGHT JOIN EMP_SAL
ON EMP.EMPID=EMP_SAL.EMPID



SELECT EMPID FROM EMP
UNION
SELECT EMPID FROM EMP_SAL


SELECT EMPID,NAME,CITY FROM EMP WHERE CITY ='NOIDA'
UNION
SELECT EMPID,NAME,CITY FROM EMP WHERE CITY ='FBD'


	
			 ### UNION ALL CLAUSE ###
                      ----------------------------------
-> The SQL UNION ALL clause/operator is used to combine the results of two SELECT
   statements including duplicate rows.

-> IN UNION ALL DISPLAY ALL THE RECORDS FROM THE BOTH TABLE WITHOUT ELIMINATING THE DUPLICATE.

-> The same rules that apply to UNION apply to the UNION ALL operator.


SELECT column1 [, column2 ]
FROM table1 [, table2 ]
[WHERE condition]

UNION ALL

SELECT column1 [, column2 ]
FROM table1 [, table2 ]
[WHERE condition]


		 EXAMPLE :

SELECT EMP.NAME,EMP.CITY,EMP_SAL.DEPT,EMP_SAL.BASIC
FROM EMP
LEFT JOIN EMP_SAL
ON EMP.EMPID=EMP_SAL.EMPID
UNION ALL
SELECT EMP.NAME,EMP.CITY,EMP_SAL.DEPT,EMP_SAL.BASIC
FROM EMP
RIGHT JOIN EMP_SAL
ON EMP.EMPID=EMP_SAL.EMPID



SELECT EMPID FROM EMP
UNION ALL
SELECT EMPID FROM EMP_SAL



					### INTERSECT CLAUSES ###
                                    -----------------------------------
-> INTERSECT MEANS COMMON RECORDS BETWEEN THE TWO TABLES.

-> The SQL INTERSECT clause/operator is used to combine two SELECT statements, but returns
   rows only from the first SELECT statement that are identical to a row in the second SELECT
   statement. This means INTERSECT returns only common rows returned by the two SELECT
   statements.



SELECT column1 [, column2 ]
FROM table1 [, table2 ]
[WHERE condition]

INTERSECT

SELECT column1 [, column2 ]
FROM table1 [, table2 ]
[WHERE condition]



		EXAMPLE :

SELECT EMP.NAME,EMP.CITY,EMP_SAL.DEPT,EMP_SAL.BASIC
FROM EMP
LEFT JOIN EMP_SALs
ON EMP.EMPID=EMP_SAL.EMPID
INTERSECT
SELECT EMP.NAME,EMP.CITY,EMP_SAL.DEPT,EMP_SAL.BASIC
FROM EMP
RIGHT JOIN EMP_SAL
ON EMP.EMPID=EMP_SAL.EMPIDs



			      ###  EXCEPT CLAUSE ###
                           ---------------------------------
->  EXCEPT MEANS ALL THE ELEMENT IN EMP AND NOT THE EMP_SAL.

-> The SQL EXCEPT clause/operator is used to combine two SELECT statements and returns
   rows from the first SELECT statement that are not returned by the second SELECT
   statement. This means EXCEPT returns only rows which are not available in second SELECT
   statement.

-> The same rules that apply to UNION apply to the EXCEPT operator.


SELECT column1 [, column2 ]
FROM table1 [, table2 ]
[WHERE condition]

EXCEPT

SELECT column1 [, column2 ]
FROM table1 [, table2 ]
[WHERE condition]



    		EXAMPLE :


SELECT EMP.NAME,EMP.CITY,EMP_SAL.DEPT,EMP_SAL.DESI
FROM EMP
LEFT JOIN EMP_SAL
ON EMP.EMPID=EMP_SAL.EMPID
EXCEPT
SELECT EMP.NAME,EMP.CITY,EMP_SAL.DEPT,EMP_SAL.DESI
FROM EMP
RIGHT JOIN EMP_SAL
ON EMP.EMPID=EMP_SAL.EMPID   


SELECT EMPID FROM EMP
EXCEPT
SELECT EMPID FROM EMP_SAL






 

























