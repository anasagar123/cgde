🔹What is the difference between is and ==?
ANS :
	---> ==(equality operator, it is checking for values are equal)
        ---> is(Identity operator, both value refer to the same object in memory)

🔹Explain mutable vs immutable types in Python.
ANS :
	---> mutable means changable(list) and mutable means not changable(Tuple)

🔹How do lists, tuples, and sets differ?
ANS :
	---> 1. Lists
		Ordered ✅
		Mutable ✅ (can be changed)
		Allows Duplicates ✅
		Syntax: [1, 2, 3]

	---> 2. Sets
		Unordered ❌
		Mutable ✅ (can add/remove items, but not indexed)
		Allows Duplicates ❌ (automatically removes them)
		Syntax: {1, 2, 3}

	---> 3. Tuples
		Ordered ✅
		Immutable ❌ (cannot be changed)
		Allows Duplicates ✅
		Syntax: (1, 2, 3)

🔹What is list comprehension? Give examples
ANS :
	---> using a single line of code.
	---> Example : [i**2 for i in list_1]

🔹What are *args and **kwargs?
ANS :
			*args
	---> Allows you to pass multiple positional arguments.
	---> Inside the function, args is treated as a tuple.
	example :
		def add_numbers(*args):
    			return sum(args)
		print(add_numbers(1, 2, 3, 4))
		# Output: 10
 
			**kwargs
	--->Allows you to pass multiple keyword arguments (like key=value).
	--->Inside the function, kwargs is treated as a dictionary.
	Example :
		def print_info(**kwargs):
    			for key, value in kwargs.items():
        		print(f"{key}: {value}")
		print_info(name="Anand", age=25, role="Data Scientist")

🔹What is the difference between a shallow copy and a deep copy?
ANS :
			Shallow Copy
	---> Creates a new object with the same references as the original object. 
	---> Changes to the nested objects in the copy will also affect the original object, and vice-versa.
		Example = shallow = copy.copy(list1) 

			Deep Copy
	---> creates a completely independent copy of the object, including all nested objects.
	---> changes in a copy, original will not effect
		Example = deep = copy.deepcopy(original)

🔹What is the difference between range() and xrange()?
ANS :
	---> Python 3.x
		✅ range() is available
		❌ xrange() does not exist

🔹What is a lambda function? How is it used?
ANS :
	---> it is a small single-expression function.
	    Eg. list(map(lambda x,y : x*y,[1,2,3,4],[4,7,2,13]) 

🔹What is the difference between a function and a method?
ANS :
			Function :
	---> A block of reusable code that performs a specific task.
	---> Can be defined independently and called directly.
		Example:
			def greet(name):
    				return f"Hello, {name}!"
			print(greet("Anand")

			Method :
	---> A function that belongs to an object (usually defined inside a class).
	---> object.method_name()

🔹What is Decorator?
ANS :
	---> A decorator in Python is a function that modifies the behavior of another 
             function (or method) — without changing its code.

🔹What is Generator?
ANS :
	---> A generator is a special type of function that allows you to yield values 
             one at a time, instead of returning them all at once. It's memory-efficient
              and great for working with large data streams or sequences.


🔹What is Synchronous in Python
ANS :
	---> Synchronous execution means that tasks are performed one at a time, 
             Sin a sequential order. Each task must finish before the next one starts.

🔹Global variables: Defined outside functions and are accessible everywhere within the program.
🔹Local variables: Defined inside functions and have their scope limited to the specific function











